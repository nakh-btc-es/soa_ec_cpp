function stConfig = ecacfg_codeformat(stConfig, stAdditionalInfo)
%
% stConfig                                (struct)  describing settings needed for the code format
%   .VarObjectClasses                     (cell array of strings)
%   .AdditionalFilterCond                 (string)
%   .VarFormat                            (struct)
%       .cfgID                            (string)
%       .Filter                           (struct)
%           .StorageClass                 (string)
%           .CustomStorageClass           (cell array of strings)
%           .AdditionalFilterCond         (string)
%       .Format                           (struct)
%           .isCodeStructComponent        (boolean)
%           .isAccessedByFunction         (boolean)
%           .codeStructName               (string)
%           .codeStructComponentNa        (string)
%           .codeVariableName             (string)
%           .codeHeaderFile               (string)
%           .codeDefinitionFile           (string)
%           .b2DMatlabIs1DCode            (boolean)
%           .s2DMatlabTo1DCodeConv        (string)
%           .s2DMatlabTo2DCodeConv        (string)
%       .Stub                             (struct)
%           .canBeStubbed                 (boolean)
%
%   .Ext                                  (struct)    array of structs with same structure as the main struct stConfig
%      .VarObjectClasses                  (...)       ....
%%
% -----------------------------------------------------------------------------
% 
% DEFAULT VALUES
% 
% -----------------------------------------------------------------------------
%
%
%
% AdditionalFilterCond : Must return a boolean (True enable the filter)
%
% Available Macros that can be interpreted by "eval" command
% <DATANAME>                : name of the data object
% <DATAOBJ>                 : data object variable
% <PARSCOPEDEFFILE>         : name of parent subssystem's c-file
% <MODELCFILE>              : model.c
% <MODELHFILE>              : model.h
% <MODELPRIVHFILE>          : model_private.h
% <PARSCOPEFUNCNAME>        : name of parent c-function
% <PARSCOPEFULLNAME>        : name of parent subsystem
% <CCODDATATYPE>            : datatype used in c-code
% <MODELNAME>               : name of the model
% 
% ii = 0;
% stConfig.VarObjectClasses = { ...
%     'BTC.Signal', ...
%     'mpt.Signal', ...
%     'Simulink.Signal', ...
%     'AUTOSAR.Signal', ...
%     'AUTOSAR4.Signal', ...
%     'BTC.Parameter', ...
%     'mpt.Parameter', ...
%     'Simulink.Parameter', ...
%     'AUTOSAR.Parameter', ...
%     'AUTOSAR4.Parameter', ...
%     'Simulink.Breakpoint', ...
%     'Simulink.LookupTable'};
% stConfig.AdditionalFilterCond = ...
%     '~isa(<DATAOBJ>, ''Simulink.LookupTable'') || strcmp(<DATAOBJ>.BreakpointsSpecification, ''Reference'')'; 
% 
% 
% ii = ii + 1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'Global'};
% stConfig.VarFormat(ii).Filter.AdditionalFilterCond     = 'ismember(class(<DATAOBJ>), {''AUTOSAR4.Signal'', ''AUTOSAR4.Parameter''})'; 
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'Const', 'ConstVolatile', 'Global', 'ExportToFile', 'Volatile'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '<DATAOBJ>.CoderInfo.CustomAttributes.DefinitionFile';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% %Signal / StorageClass = 'ExportedGlobal'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = {'ExportedGlobal'};
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {''};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '<MODELHFILE>';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '<MODELCFILE>';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% %Signal / StorageClass = 'Default'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = {'Custom'};
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'Default'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '<MODELHFILE>';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '<MODELCFILE>';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'GetSet'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = true;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% %'''user_data_definition.c'''; %If is empty or not found in codegen file list, stubgen will be activated
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = true;
% %Simplified Get/Set functions
% stConfig.VarFormat(ii).Stub.accessFuncType             = 'Simplified'; %Advanced
% %get access stub format
% %Could also be '[''get_'',<DATANAME>]';
% stConfig.VarFormat(ii).Stub.getFunc.Name               = '<DATAOBJ>.CoderInfo.CustomAttributes.GetFunction';
% %set access stub format
% %Could also be '[''set_'',<DATANAME>]';
% stConfig.VarFormat(ii).Stub.setFunc.Name               = '<DATAOBJ>.CoderInfo.CustomAttributes.SetFunction';
% stConfig.VarFormat(ii).Stub.StubVariableName           = '<DATANAME>';
% 
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = {'Custom'};
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'Struct', 'BitField', 'StructVolatile'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = true;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '<DATAOBJ>.CoderInfo.CustomAttributes.StructName';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeVariableName         = '';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '<MODELCFILE>';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% %StorageClass = 'ImportedExtern' / CustomStorage = ''
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = 'ImportedExtern';
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {''};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '<MODELPRIVHFILE>';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = true;
% stConfig.VarFormat(ii).Stub.codeStructName             = '';
% stConfig.VarFormat(ii).Stub.codeStructComponentName    = '';
% stConfig.VarFormat(ii).Stub.codeVariableName           = '<DATANAME>';
% 
% %StorageClass = 'Custom' / CustomStorageClass = 'FileScope'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'FileScope'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '<PARSCOPEDEFFILE>';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% %StorageClass = 'Custom' / CustomStorage = 'ImportFromFile'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass             = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass       = {'ImportFromFile'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent    = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction     = false;
% stConfig.VarFormat(ii).Format.codeStructName           = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName  = '';
% stConfig.VarFormat(ii).Format.codeVariableName         = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile           = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% stConfig.VarFormat(ii).Format.codeDefinitionFile       = '';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed               = true;
% stConfig.VarFormat(ii).Stub.codeStructName             = '';
% stConfig.VarFormat(ii).Stub.codeStructComponentName    = '';
% stConfig.VarFormat(ii).Stub.codeVariableName           = '<DATANAME>';
% 
% %StorageClass = 'Custom' / CustomStorage = 'Reusable.Imported'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass                 = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass           = {'Reusable'};
% stConfig.VarFormat(ii).Filter.CustomAttributes(1).name     = 'DataScope';
% stConfig.VarFormat(ii).Filter.CustomAttributes(1).value    = 'Imported';
% stConfig.VarFormat(ii).Format.isCodeStructComponent        = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction         = false;
% stConfig.VarFormat(ii).Format.codeStructName               = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName      = '';
% stConfig.VarFormat(ii).Format.codeVariableName             = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile               = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% stConfig.VarFormat(ii).Format.codeDefinitionFile           = '';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode            = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv        = 'ColumnMajor';
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv        = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed                   = true;
% stConfig.VarFormat(ii).Stub.codeStructName                 = '';
% stConfig.VarFormat(ii).Stub.codeStructComponentName        = '';
% stConfig.VarFormat(ii).Stub.codeVariableName               = '<DATANAME>';
% 
% %StorageClass = 'Custom' / CustomStorage = 'Reusable.Exported'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID                               = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass                 = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass           = {'Reusable'};
% stConfig.VarFormat(ii).Filter.CustomAttributes(1).name     = 'DataScope';
% stConfig.VarFormat(ii).Filter.CustomAttributes(1).value    = 'Exported';
% stConfig.VarFormat(ii).Format.isCodeStructComponent        = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction         = false;
% stConfig.VarFormat(ii).Format.codeStructName               = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName      = '';
% stConfig.VarFormat(ii).Format.codeVariableName             = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile               = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% stConfig.VarFormat(ii).Format.codeDefinitionFile           = '<DATAOBJ>.CoderInfo.CustomAttributes.DefinitionFile';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode            = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv        = 'ColumnMajor'; %RowMajor
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv        = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed                   = false;
% 
% %StorageClass = 'Custom' / CustomStorage = 'Reusable.Auto'
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID                               = sprintf('BTCVARFORMATID%.3d', ii);
% stConfig.VarFormat(ii).Filter.StorageClass                 = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass           = {'Reusable'};
% stConfig.VarFormat(ii).Filter.CustomAttributes(1).name     = 'DataScope';
% stConfig.VarFormat(ii).Filter.CustomAttributes(1).value    = 'Auto';
% stConfig.VarFormat(ii).Format.isCodeStructComponent        = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction         = false;
% stConfig.VarFormat(ii).Format.codeStructName               = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName      = '';
% stConfig.VarFormat(ii).Format.codeVariableName             = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile               = '<MODELHFILE>';
% stConfig.VarFormat(ii).Format.codeDefinitionFile           = '<MODELCFILE>';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode            = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv        = 'ColumnMajor';
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv        = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed                   = false;
% 
% % ImportedDefine
% ii=ii+1;
% stConfig.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d',ii);
% stConfig.VarFormat(ii).Filter.StorageClass                   = 'Custom';
% stConfig.VarFormat(ii).Filter.CustomStorageClass             = {'ImportedDefine'};
% stConfig.VarFormat(ii).Format.isCodeStructComponent          = false;
% stConfig.VarFormat(ii).Format.isAccessedByFunction           = false;
% stConfig.VarFormat(ii).Format.codeStructName                 = '';
% stConfig.VarFormat(ii).Format.codeStructComponentName        = '';
% stConfig.VarFormat(ii).Format.codeVariableName               = '<DATANAME>';
% stConfig.VarFormat(ii).Format.codeHeaderFile                 = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% stConfig.VarFormat(ii).Format.codeDefinitionFile             = '';
% stConfig.VarFormat(ii).Format.b2DMatlabIs1DCode              = true;
% stConfig.VarFormat(ii).Format.s2DMatlabTo1DCodeConv          = 'ColumnMajor';
% stConfig.VarFormat(ii).Format.s2DMatlabTo2DCodeConv          = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stConfig.VarFormat(ii).Stub.canBeStubbed                     = true;
% stConfig.VarFormat(ii).Stub.codeStructName                   = '';
% stConfig.VarFormat(ii).Stub.codeStructComponentName          = '';
% stConfig.VarFormat(ii).Stub.codeVariableName                 = '<DATANAME>';
% 
% % Extensions that define special cases not covered by the main config
% stCfg.Ext = i_getExtensions(ii);
% end
% 
% 
% %%
% function astExt = i_getExtensions(iCounterID)
% [astExt(1), iCounterID] = i_getExtensionLUT(iCounterID);
% % ...
% end
% 
% 
% %%
% function [stExt, iCounterID] = i_getExtensionLUT(iCounterID)
% ii = 0;
% stExt.VarObjectClasses = {'Simulink.LookupTable'};
% stExt.AdditionalFilterCond = '~strcmp(<DATAOBJ>.BreakpointsSpecification, ''Reference'')'; 
% 
% ii = ii + 1; iCounterID = iCounterID + 1;
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', iCounterID);
% stExt.VarFormat(ii).Filter.StorageClass             = {'Custom'};
% stExt.VarFormat(ii).Filter.CustomStorageClass       = {'Const', 'ConstVolatile', 'Global', 'ExportToFile', 'Volatile'};
% stExt.VarFormat(ii).Format.isCodeStructComponent    = true;
% stExt.VarFormat(ii).Format.isAccessedByFunction     = false;
% stExt.VarFormat(ii).Format.codeStructName           = '<DATANAME>';
% stExt.VarFormat(ii).Format.codeStructComponentName  = '<DATAOBJ>.Table.FieldName';
% stExt.VarFormat(ii).Format.codeVariableName         = '';
% stExt.VarFormat(ii).Format.codeHeaderFile           = '<DATAOBJ>.CoderInfo.CustomAttributes.HeaderFile';
% stExt.VarFormat(ii).Format.codeDefinitionFile       = '<DATAOBJ>.CoderInfo.CustomAttributes.DefinitionFile';
% stExt.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stExt.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stExt.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stExt.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% ii = ii + 1; iCounterID = iCounterID + 1;
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', iCounterID);
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stExt.VarFormat(ii).Filter.StorageClass             = {'Custom'};
% stExt.VarFormat(ii).Filter.CustomStorageClass       = {'Struct', 'BitField'};
% stExt.VarFormat(ii).Format.isCodeStructComponent    = true;
% stExt.VarFormat(ii).Format.isAccessedByFunction     = false;
% stExt.VarFormat(ii).Format.codeStructName           = '<DATAOBJ>.CoderInfo.CustomAttributes.StructName';
% stExt.VarFormat(ii).Format.codeStructComponentName  = {'<DATANAME>.', '<DATAOBJ>.Table.FieldName'}; % NEW!!!
% stExt.VarFormat(ii).Format.codeVariableName         = '';
% stExt.VarFormat(ii).Format.codeHeaderFile           = '';
% stExt.VarFormat(ii).Format.codeDefinitionFile       = '<MODELCFILE>';
% stExt.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stExt.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stExt.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stExt.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% ii = ii + 1; iCounterID = iCounterID + 1;
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', iCounterID);
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stExt.VarFormat(ii).Filter.StorageClass             = 'Custom';
% stExt.VarFormat(ii).Filter.CustomStorageClass       = {'FileScope'};
% stExt.VarFormat(ii).Format.isCodeStructComponent    = true;
% stExt.VarFormat(ii).Format.isAccessedByFunction     = false;
% stExt.VarFormat(ii).Format.codeStructName           = '<DATANAME>';
% stExt.VarFormat(ii).Format.codeStructComponentName  = '<DATAOBJ>.Table.FieldName';
% stExt.VarFormat(ii).Format.codeVariableName         = '';
% stExt.VarFormat(ii).Format.codeHeaderFile           = '';
% stExt.VarFormat(ii).Format.codeDefinitionFile       = '<PARSCOPEDEFFILE>';
% stExt.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stExt.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stExt.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stExt.VarFormat(ii).Stub.canBeStubbed               = false;
% 
% ii = ii + 1; iCounterID = iCounterID + 1;
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', iCounterID);
% stExt.VarFormat(ii).cfgID = sprintf('BTCVARFORMATID%.3d', ii);
% stExt.VarFormat(ii).Filter.StorageClass             = {'ExportedGlobal'};
% stExt.VarFormat(ii).Filter.CustomStorageClass       = {''};
% stExt.VarFormat(ii).Format.isCodeStructComponent    = true;
% stExt.VarFormat(ii).Format.isAccessedByFunction     = false;
% stExt.VarFormat(ii).Format.codeStructName           = '<DATANAME>';
% stExt.VarFormat(ii).Format.codeStructComponentName  = '<DATAOBJ>.Table.FieldName';
% stExt.VarFormat(ii).Format.codeVariableName         = '';
% stExt.VarFormat(ii).Format.codeHeaderFile           = '<MODELHFILE>';
% stExt.VarFormat(ii).Format.codeDefinitionFile       = '<MODELCFILE>';
% stExt.VarFormat(ii).Format.b2DMatlabIs1DCode        = true;
% stExt.VarFormat(ii).Format.s2DMatlabTo1DCodeConv    = 'ColumnMajor';
% stExt.VarFormat(ii).Format.s2DMatlabTo2DCodeConv    = ''; %M_RowCol_C_RowCol (Direct) or M_RowCol_C_ColRow (Transpose)
% stExt.VarFormat(ii).Stub.canBeStubbed               = false;
% end

