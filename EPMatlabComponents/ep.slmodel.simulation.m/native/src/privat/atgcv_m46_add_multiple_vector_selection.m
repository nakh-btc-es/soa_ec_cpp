function atgcv_m46_add_multiple_vector_selection(stEnv, sModelName, astNames, bShowExpectedValues)
% Enhances the debug model for multiple vector selection
%
% function atgcv_m46_add_multiple_vector_selection(stEnv, sModelName, casNames, bShowExpectedValues)

%   INPUT               DESCRIPTION
%   stEnv                (struct)    Environment settings.
%     .hMessenger        (handle)    Messenger handle.
%     .sTmpPath          (string)    TMP directory
%     .sResultPath       (string)    Result directory for outputs
%   sModelName           (string)    Name of the extraction model (without
%                                    path – assumed to be available in the
%                                    sExportDir)
%   astNames         (struct array)  (Array of) struct containing names
%                                    (without path – assumed to be available in the
%                                    sExportDir)
%     .sMatFileName       (string)    Name of the .mat-file
%     .sDisplayName       (string)    Display name with special characters%                                    path – assumed to be available in the
%                                    sExportDir)
%   bShowExpectedValues  (boolean)   Whether or not expected values shall
%                                    be shown.
%


%%
try
    [hBlock, hSFctIn, hSFctOut] = i_findBlock(sModelName, bShowExpectedValues);
    if ~isempty(hBlock)
        i_addMaskToBlock(hBlock, hSFctIn, astNames, hSFctOut);
    end
    
catch
    stError = atgcv_lasterror;
    osc_messenger_add(stEnv, ...
        'ATGCV:MDEBUG_ENV:EXPORT_ERROR', ...
        'step', 'multiple vector enhancement', ...
        'descr', stError.message);
end
end


%%
function [hBlock, hSFctIn, hSFctOut] = i_findBlock(sModelName, bShowExpectedValues)
hBlock = [];
hSFctIn = [];
hSFctOut = [];
cahBlocksIn = ep_find_system(sModelName, 'Name', 'BTCHarnessIN');
if ~isempty(cahBlocksIn)
    hBlock = cahBlocksIn{1};
    hSFctIn = cahBlocksIn{2};
end
if bShowExpectedValues
    cahBlocksOut = ep_find_system(sModelName, 'Name', 'BTCHarnessOut');
    if ~isempty(cahBlocksOut)
        cahBlocksOut2 = ep_find_system(cahBlocksOut{1}, 'Name', 'BTCHarnessOUT');
        if ~isempty(cahBlocksOut2)
            hSFctOut = cahBlocksOut2{1};
        end
    end
end
end


%%
function i_addMaskToBlock(hBlock, hSFct, astNames, hSFctOut)
set_param(hBlock, 'BackgroundColor', 'yellow');
set_param(hBlock, 'Mask', 'on');
set_param(hBlock, 'MaskType', 'Vector Selection');
set_param(hBlock, 'MaskDescription', 'Choose vector for debugging');
set_param(hBlock, 'MaskVariables', 'DebugVector=@1');
set_param(hBlock, 'MaskPromptString', 'Debug vector:');

% different control element for older Matlab versions
if verLessThan('matlab', '9.2.0')
    set_param(hBlock, 'MaskStyleString', 'popup()');
else
    % newer version, better for foreign character support
    set_param(hBlock, 'MaskStyleString', 'combobox()');
end

% prepare concatenated display names
for i = 1:numel(astNames)
    astNames(i).sDisplayName = [astNames(i).sDisplayName ' [' astNames(i).sMatFileName ']'];
end

oMask = Simulink.Mask.get(hBlock);
oMask.Parameters.TypeOptions = {astNames(:).sDisplayName};
set_param(hBlock, 'MaskVisibilityString', 'on');
set_param(hBlock, 'MaskInitialization', i_getInitString(hSFct, hSFctOut));

oMask = Simulink.Mask.get(hBlock);
oCtrl = oMask.getDialogControl('ParameterGroupVar');
if ~isempty(oCtrl)
    oCtrl.Prompt = '';
end
end


%%
function casSplits = i_split(sArg, sDelim)
jArg = java.lang.String(sArg);
jasSplits = jArg.split(sDelim);
casSplits = cell(length(jasSplits),1);
for i = 1:length(jasSplits)
    casSplits{i} = char(jasSplits(i));
end
end


%%
function sInitString = i_getInitString(hSFct, hSFctOut)
casOldParameters = i_split(get_param(hSFct, 'Parameters'), ',');
sHarnessFile = casOldParameters{1};

sHarnessString = sprintf([ ...
    'sDisplayName = get_param(gcb, ''MaskValueString'');\n',...
    'casVectorName = regexp(sDisplayName, ''.*\\[(.+)\\]$'', ''tokens'');\n',...
    'sVectorName = casVectorName{1}{1};\n',...
    'sVectorMatPath = sprintf(''%%s/%%s.mat'', sVectorName, sVectorName);\n', ...
    'sInputMDFFile = fullfile(sVectorName, ''mil_i.mdf'');\n', ...
    'sParent = get_param(gcb, ''Parent'');\n', ...
    'hSFct = get_param([sParent, ''/BTCHarnessIN/BTCHarnessIN''], ''Handle'');\n', ...
    sprintf('sHarnessFile = %s;\n', sHarnessFile), ...
    'sParameters = sprintf(''''''%%s'''', ''''%%s'''', ''''%%s'''''', sHarnessFile, sInputMDFFile, sVectorName);\n', ...
    'set_param(hSFct, ''Parameters'', sParameters);\n']);
if ~isempty(hSFctOut)
    casOldParametersOut = i_split(get_param(hSFctOut, 'Parameters'), ',');
    sHarnessFileOut = casOldParametersOut{1};
    sHarnessString = [sHarnessString, sprintf([ ...
        'sOutputMDFFile = fullfile(sVectorName, ''mil_o.mdf'');\n', ...
        'hSFctOut = get_param([sParent, ''/BTCHarnessOut/BTCHarnessOUT''], ''Handle'');\n',...
        sprintf('sHarnessFileOut = %s;\n', sHarnessFileOut), ...
        'sParameters = sprintf(''''''%%s'''', ''''%%s'''', ''''%%s'''''', sHarnessFileOut, sOutputMDFFile, sVectorName);\n', ...
        'set_param(hSFctOut, ''Parameters'', sParameters);\n\n'])];
end

sInitString = [sHarnessString, sprintf([ ...
    'sDispGeneral = ''Double-click to choose\\nvector for debugging\\n\\nCurrent vector:\\n'';\n', ...
    'sDisp = [''disp('''''', sDispGeneral, sDisplayName, '''''')''];\n', ...
    'set_param(gcb, ''MaskDisplay'', sDisp);\n', ...
    '\n', ...
    'evalin(''base'', sprintf(''load(''''%%s'''')'', sVectorMatPath));\n', ...
    'nLength = evalin(''base'', ''btc_vector_length'');\n', ...
    'hModel = get_param(sParent, ''Handle'');\n', ...
    'if strcmp(get_param(hModel, ''SimulationStatus''), ''stopped'')\n', ...
    '  sModel = bdroot(gcb);\n', ...
    '  sPreSimScript = [sModel, ''_pre_sim''];\n', ...
    '  if exist(sPreSimScript, ''file'')\n', ...
    '    disp(''Calling pre-sim callback'');\n', ...
    '    evalin(''base'', sPreSimScript);\n', ...
    '  end\n', ...
    'end\n', ...
    '\n', ...
    'cfgSrc = getActiveConfigSet(hModel);\n', ...
    'solver = cfgSrc.getComponent(''Solver'');\n', ...
    'nStopLength = max(0, nLength-1);\n', ...
    'sSampleTime = solver.FixedStep;\n', ...
    'if ~isempty(sSampleTime)\n', ...
    '  dSampleTime = double(evalin(''base'', sSampleTime));\n', ...
    '  if ~isnan(dSampleTime) \n', ...
    '    sValue = num2str( dSampleTime );\n', ...
    '    dValue = str2double(sValue);\n', ...
    '    bRes = isequal(dValue, dSampleTime); \n', ...
    '  else\n', ...
    '    bRes = false;\n', ...
    '  end\n', ...
    '  if ~bRes\n', ...
    '    solver.StopTime = sprintf(''%%s * %%s'', sSampleTime, num2str(nStopLength));\n', ...
    '  else\n', ...
    '    solver.StopTime = num2str(dSampleTime * nStopLength); \n', ...
    '  end\n', ...
    'end\n'])];
end